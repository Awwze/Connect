import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
MAIN_MENU, CATEGORY, GET_PHONE, GET_DETAILS, CONFIRM_ORDER = range(5)

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
admin_chat_id = '-1002165969292'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat ID

prices = {
    '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã': {
        '–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞': '–æ—Ç 40$',
        '–ö—Ä–∞—Å–æ—Ç–∞': '–æ—Ç 25$',
        '–ö–∞—Ñ–µ': '–æ—Ç 30$',
        'Telegram miniApps': '10$',
        '–î—Ä—É–≥–æ–µ': '–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –í–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π'
    },
    '–í–µ–±-—Å–∞–π—Ç—ã': {
        '–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞': '–æ—Ç 60$',
        '–ö—Ä–∞—Å–æ—Ç–∞': '–æ—Ç 15$',
        '–ö–∞—Ñ–µ': '–æ—Ç 30$',
        'E-commerce': '–æ—Ç 60$',
        '–î—Ä—É–≥–æ–µ': '–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –í–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π'
    },
    '–ë–∏—Ç—ã': {
        '–ü–æ–ª–Ω—ã–π –±–∏—Ç': '30$'
    },
    '–ü—Ä–µ–≤—å—é': {
        'YouTube': '–æ—Ç 10$',
        'TikTok/Instagram': '–æ—Ç 10$'
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price_text = 'üìå *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*\n\n'
    for section, items in prices.items():
        price_text += f'*{section}:*\n'
        for item, price in items.items():
            price_text += f'- {item} - {price}\n'
        price_text += '\n'
    
    reply_keyboard = [['–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã', '–í–µ–±-—Å–∞–π—Ç—ã'], ['–ë–∏—Ç—ã', '–ü—Ä–µ–≤—å—é'], ['–ó–∞–∫–∞–∑–∞—Ç—å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã']]
    await update.message.reply_text(
        price_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return MAIN_MENU

async def bot_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data['section'] = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã'
    price_text = 'üìå *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞:*\n'
    for category, price in prices['–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã'].items():
        price_text += f'- {category} - {price}\n'
    
    reply_keyboard = [['–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞', '–ö—Ä–∞—Å–æ—Ç–∞'], ['–ö–∞—Ñ–µ', 'Telegram miniApps'], ['–î—Ä—É–≥–æ–µ', '–ù–∞–∑–∞–¥']]
    await update.message.reply_text(
        price_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return CATEGORY

async def website_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data['section'] = '–í–µ–±-—Å–∞–π—Ç—ã'
    price_text = 'üìå *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞:*\n'
    for category, price in prices['–í–µ–±-—Å–∞–π—Ç—ã'].items():
        price_text += f'- {category} - {price}\n'
    
    reply_keyboard = [['–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞', '–ö—Ä–∞—Å–æ—Ç–∞'], ['–ö–∞—Ñ–µ', 'E-commerce'], ['–î—Ä—É–≥–æ–µ', '–ù–∞–∑–∞–¥']]
    await update.message.reply_text(
        price_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return CATEGORY

async def request_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == '–ù–∞–∑–∞–¥':
        return await start(update, context)
    user_data['category'] = update.message.text
    await update.message.reply_text(
        'üìû *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)], ['–ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return GET_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.contact:
        user_data['phone_number'] = update.message.contact.phone_number
        user_data['username'] = update.message.from_user.username
        await update.message.reply_text(
            '‚úçÔ∏è *–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:*',
            parse_mode='Markdown'
        )
        return GET_DETAILS
    elif update.message.text == '–ù–∞–∑–∞–¥':
        return await start(update, context)
    else:
        await update.message.reply_text(
            'üìû *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*',
            parse_mode='Markdown'
        )
        return GET_PHONE

async def get_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == '–ù–∞–∑–∞–¥':
        return await start(update, context)
    user_data['details'] = update.message.text
    await update.message.reply_text(
        'üìå *–°–ø–∞—Å–∏–±–æ! –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏–ª–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.*',
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ù–∞–∑–∞–¥']], one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        order_text = (
            f"–†–∞–∑–¥–µ–ª: {user_data.get('section', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–µ—Ç–∞–ª–∏: {user_data.get('details', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        await context.bot.send_message(chat_id=admin_chat_id, text=order_text)

        await update.message.reply_text('‚úÖ *–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.*', parse_mode='Markdown')
        user_data.clear()
        return await start(update, context)
    elif update.message.text == '–ù–∞–∑–∞–¥':
        return await start(update, context)
    else:
        await update.message.reply_text(
            'üìå *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏–ª–∏ "–ù–∞–∑–∞–¥".*',
            parse_mode='Markdown'
        )
        return CONFIRM_ORDER

async def show_order_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [['–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã', '–í–µ–±-—Å–∞–π—Ç—ã'], ['–ë–∏—Ç—ã', '–ü—Ä–µ–≤—å—é'], ['–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ù–∞–∑–∞–¥']]
    await update.message.reply_text(
        'üìå *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return MAIN_MENU

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact_info = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +998946000032\n"
        "Telegram: @Hhhoay\n"
        "Telegram 2: @tgAkbarr"
    )
    await update.message.reply_text(contact_info, parse_mode='Markdown')
    return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price_text = 'üìå *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*\n\n'
    for section, items in prices.items():
        price_text += f'*{section}:*\n'
        for item, price in items.items():
            price_text += f'- {item} - {price}\n'
        price_text += '\n'
    
    reply_keyboard = [['–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã', '–í–µ–±-—Å–∞–π—Ç—ã'], ['–ë–∏—Ç—ã', '–ü—Ä–µ–≤—å—é'], ['–ó–∞–∫–∞–∑–∞—Ç—å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã']]
    await update.message.reply_text(
        price_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('üëã *–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.*', reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token("7373812547:AAGRQkukT5gUMSSApucrKjHjU1lINCLpOr8").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex('^(–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã)$'), bot_menu),
                MessageHandler(filters.Regex('^(–í–µ–±-—Å–∞–π—Ç—ã)$'), website_menu),
                MessageHandler(filters.Regex('^(–ë–∏—Ç—ã|–ü—Ä–µ–≤—å—é)$'), request_contact),
                MessageHandler(filters.Regex('^(–ö–æ–Ω—Ç–∞–∫—Ç—ã)$'), show_contacts),
                MessageHandler(filters.Regex('^(–ó–∞–∫–∞–∑–∞—Ç—å)$'), show_order_menu)
            ],
            CATEGORY: [
                MessageHandler(filters.Regex('^(–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞|–ö—Ä–∞—Å–æ—Ç–∞|–ö–∞—Ñ–µ|Telegram miniApps|E-commerce|–î—Ä—É–≥–æ–µ)$'), request_contact),
                MessageHandler(filters.Regex('^(–ù–∞–∑–∞–¥)$'), show_main_menu)
            ],
            GET_PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                MessageHandler(filters.Regex('^(–ù–∞–∑–∞–¥)$'), start)
            ],
            GET_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_details),
                MessageHandler(filters.Regex('^(–ù–∞–∑–∞–¥)$'), start)
            ],
            CONFIRM_ORDER: [
                MessageHandler(filters.Regex('^(–û—Ç–ø—Ä–∞–≤–∏—Ç—å)$'), confirm_order),
                MessageHandler(filters.Regex('^(–ù–∞–∑–∞–¥)$'), start)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
